

function greet(name:string):string{
  return `hello, ${name}!`;
}

console.log(greet("Alice"));

function add(a:number,b:number):number{
  return a+b;
}

console.log(add(3,4));

function addstr(str1:string,str2:string):string{
  return `${str1} ${str2}`;
}

console.log(addstr('hi','hello'));

function greeting(name:string,age?:number):string{
  if (age){
  return `hello ${name} you are ${age} years old!`;
  }
  else{
    return `hello ${name}`;
  }
}

console.log(greeting("anu",25));
console.log(greeting("keerthi"));

function degreet(name:string,greeting:string="hello"):string{
  return `${greeting} ${name}`;
}

let gr:String=degreet("sam");
console.log(gr);

class emp extends person{
  job:string;
  
  constructor(name:string,age:number,job:string){
    super(name,age);
    this.job=job;
  }
  greet():string{
    return `${super.greet()} I work as a ${this.job}.`;
  }
}

const phil=new emp("Phil",30,"designer");
console.log(phil.greet());






interface people{
  name:string;
  age:number;
  greet():string;
}

const person: people ={
  name:"Anu",
  age:25,
  greet:() => "Hello!"
};

console.log(person.greet());

interface people1{
  name:string;
  age:number;
  addr?:string;
}

const person1:people1={
  name:"carlyn",
  age:30
};

const person2:people1={
  name:"keerthi",
  age:25,
  addr:"coimbatore"
};



interface people1 {
  name: string;
  age: number;
  addr?: string;
  greet()?: string;
}

const person1: people1 = {
  name: "carlyn",
  age: 30,
  greet() {
    return `I am ${this.name} and I am ${this.age} years old`;
  }
};

console.log(person1.greet());

const person2: people1 = {
  name: "keerthi",
  age: 25,
  addr: "coimbatore",
  greet() {
    return `I am ${this.name} and I am ${this.age} years old`; // You need this method
  }
};












class person{
  name:string;
  age:number;
  
  constructor(name:string,age:number){
    this.name=name;
    this.age=age;
  }
  setname(name:string){
    this.name=name;
  }
  greet():string{
    return `hello, my name is ${this.name} and I am ${this.age} years old`;
  }
}

const sam=new person("Sam",25);
sam.setname("samual");
console.log(sam.greet());































Absolutely! Let's dive deeper into **interfaces** in TypeScript and cover their advanced features and use cases in detail. Interfaces are a key feature in TypeScript that help define the shape of an object, enforce structure, and create contracts for classes or objects.

### **1. Basic Interface**

An **interface** in TypeScript defines a blueprint for objects. It describes the properties and methods an object must have. Interfaces **don't provide implementation**; they only define the structure.

```typescript
interface Person {
  name: string;
  age: number;
  greet(): string;
}

const person: Person = {
  name: "Alice",
  age: 30,
  greet() {
    return `Hello, my name is ${this.name} and I am ${this.age} years old.`;
  }
};

console.log(person.greet()); // Output: Hello, my name is Alice and I am 30 years old.
```

Here:
- `Person` is an interface.
- `name: string`, `age: number`, and `greet(): string` define the structure of the object that implements this interface.

### **2. Optional Properties**

Sometimes, not all properties are required to be present in an object. You can make properties **optional** by using the `?` symbol.

```typescript
interface Person {
  name: string;
  age: number;
  address?: string;  // Optional property
}

const person1: Person = { name: "Alice", age: 30 };  // Valid
const person2: Person = { name: "Bob", age: 25, address: "123 Street" };  // Valid

console.log(person1.address);  // Output: undefined
```

- `address?`: This means the `address` property is optional. If it's provided, it must be a `string`, but it's not required to be included in every object that implements the interface.

### **3. Readonly Properties**

You can specify that a property of an interface is **readonly**, meaning it can only be assigned once and can't be changed after initialization.

```typescript
interface Person {
  readonly name: string;
  readonly age: number;
}

const person: Person = { name: "Alice", age: 30 };

person.name = "Bob";  // Error: Cannot assign to 'name' because it is a read-only property.
```

- The `readonly` modifier prevents reassignment of the property after initialization. This is useful for creating immutable objects.

### **4. Method Signatures**

An interface can also define the signature of a function or method. It doesn’t specify how the function is implemented, just the structure.

```typescript
interface Greeting {
  (name: string, age: number): string;  // Function signature
}

const greet: Greeting = (name: string, age: number) => {
  return `Hello, ${name}, you are ${age} years old.`;
};

console.log(greet("Alice", 30));  // Output: Hello, Alice, you are 30 years old.
```

- `Greeting` interface defines the signature of a function that takes two parameters (`name: string`, `age: number`) and returns a `string`.

### **5. Extending Interfaces**

Interfaces can **extend** other interfaces, meaning one interface can inherit the properties and methods of another. This is useful for creating more complex types based on simpler ones.

```typescript
interface Animal {
  name: string;
  sound(): string;
}

interface Dog extends Animal {
  breed: string;
}

const dog: Dog = {
  name: "Rex",
  breed: "Labrador",
  sound() {
    return "Woof!";
  }
};

console.log(dog.sound());  // Output: Woof!
```

- `Dog` extends the `Animal` interface, so it inherits the `name` property and `sound` method from `Animal`, and it adds a new property `breed`.

### **6. Interface for Class Contracts**

You can use interfaces to define a contract that a class must adhere to. The class will need to implement all the properties and methods described in the interface.

```typescript
interface Shape {
  area(): number;
}

class Circle implements Shape {
  radius: number;

  constructor(radius: number) {
    this.radius = radius;
  }

  area(): number {
    return Math.PI * this.radius * this.radius;
  }
}

const circle = new Circle(5);
console.log(circle.area());  // Output: 78.53981633974483
```

- The `Shape` interface requires that any class that implements it must have an `area()` method that returns a `number`.
- `Circle` class implements the `Shape` interface, so it provides its own implementation of the `area()` method.

### **7. Index Signatures**

If you don’t know the exact names of properties ahead of time, but you know the structure, you can use an **index signature** to allow dynamic property names.

```typescript
interface StringDictionary {
  [key: string]: string;
}

const dict: StringDictionary = {
  name: "Alice",
  profession: "Engineer"
};

console.log(dict["name"]);  // Output: Alice
```

- `[key: string]: string;` means that any property name can be used as long as its value is a `string`.

### **8. Interfaces and Function Overloading**

You can also use interfaces to define function overloads (multiple versions of a function with different parameter types).

```typescript
interface Logger {
  (message: string): void;
  (message: string, level: string): void;
}

const log: Logger = (message: string, level?: string): void => {
  if (level) {
    console.log(`[${level}] ${message}`);
  } else {
    console.log(message);
  }
};

log("Hello, world!");               // Output: Hello, world!
log("Error occurred", "Error");      // Output: [Error] Error occurred
```

- The `Logger` interface defines two overloads: one that takes just a `message` and one that takes a `message` and a `level`.

### **9. Combining Interfaces**

You can combine multiple interfaces using the `extends` keyword. This is useful if you want to merge different types of objects.

```typescript
interface Shape {
  area(): number;
}

interface Color {
  color: string;
}

interface ColoredShape extends Shape, Color {}

const coloredCircle: ColoredShape = {
  color: "red",
  area() {
    return Math.PI * 5 * 5;
  }
};

console.log(coloredCircle.color);  // Output: red
console.log(coloredCircle.area()); // Output: 78.53981633974483
```

- The `ColoredShape` interface combines both the `Shape` and `Color` interfaces, meaning the object must implement both `area()` (from `Shape`) and `color` (from `Color`).

### **10. Interfaces with Class and Object**

Interfaces can be used to define objects or classes, and you can use them to ensure certain methods or properties exist. It's especially useful in defining the contracts of complex systems.

```typescript
interface Logger {
  log(message: string): void;
}

class ConsoleLogger implements Logger {
  log(message: string): void {
    console.log(message);
  }
}

const logger: Logger = new ConsoleLogger();
logger.log("This is a log message!");  // Output: This is a log message!
```

---

### **Summary of Key Points:**
- **Basic Interfaces** define the shape of objects with properties and methods.
- **Optional Properties** allow you to make some properties optional using `?`.
- **Readonly Properties** make properties immutable using `readonly`.
- **Method Signatures** specify the structure of functions/methods in an interface.
- **Extending Interfaces** allows one interface to inherit from another, helping to build more complex types.
- **Interfaces and Classes** can be used together to enforce a structure in object-oriented programming.
- **Index Signatures** allow flexible property names with a specified type.
- **Combining Interfaces** lets you merge multiple interfaces into one.

By using interfaces effectively, you can ensure your TypeScript code is strongly typed, more maintainable, and free from many common runtime errors.

Feel free to ask more about any specific aspect or if you'd like additional examples!